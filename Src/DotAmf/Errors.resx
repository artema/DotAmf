<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="SettingMissingProperty" xml:space="preserve">
    <value>Unable to set undefined property {0} on not dynamic object.</value>
  </data>
  <data name="AmfContractResolver_InvalidAliasName" xml:space="preserve">
    <value>Invalid alias name.</value>
  </data>
  <data name="AmfContractResolver_AliasCollision" xml:space="preserve">
    <value>Alias '{0}' is already taken by another type.</value>
  </data>
  <data name="AmfContractResolver_TypeRegistrationError" xml:space="preserve">
    <value>Unable to register type.</value>
  </data>
  <data name="Amf3Deserializer_ReadString_NegativeLength" xml:space="preserve">
    <value>Length cannot be negative.</value>
  </data>
  <data name="Amf3Deserializer_ReadObject_InstantiationError" xml:space="preserve">
    <value>Error instantiating a data contract object.</value>
  </data>
  <data name="DataContractUtil_GetContractAlias_InvalidContract" xml:space="preserve">
    <value>Type '{0}' is not a valid AMF data contract.</value>
  </data>
  <data name="AmfDataContractResolver_ProxyInvalidTypeName" xml:space="preserve">
    <value>Invalid type name.</value>
  </data>
  <data name="AmfDataContractResolver_ProxyTypeAlreadyExists" xml:space="preserve">
    <value>Proxy type with the given type name already exists.</value>
  </data>
  <data name="AmfDataContractResolver_TryResolveTypeContracNotRegistered" xml:space="preserve">
    <value>Contract is not registered.</value>
  </data>
  <data name="DataContractAmfSerializer_ReadObject_ContractsError" xml:space="preserve">
    <value>Unable to deserialize data contracts.</value>
  </data>
  <data name="DataContractAmfSerializer_ReadObject_ErrorReadingAmf" xml:space="preserve">
    <value>Error reading AMF data.</value>
  </data>
  <data name="DataContractAmfSerializer_ReadObject_InvalidStream" xml:space="preserve">
    <value>Stream does not allow reading or seeking.</value>
  </data>
  <data name="DataContractAmfSerializer_WriteObject_InvalidStream" xml:space="preserve">
    <value>Stream does not allow writing.</value>
  </data>
  <data name="AmfSerializationContext_AmfSerializationContext_IllegalContextSwitch" xml:space="preserve">
    <value>Context switch makes sence only in AMF3.</value>
  </data>
  <data name="AmfPacketReader_AmfPacketReader_ContextSwitchRequired" xml:space="preserve">
    <value>Context switch is required for reading data from AMF packets.</value>
  </data>
  <data name="Amf0Deserializer_ReadValue_UnsupportedType" xml:space="preserve">
    <value>Type '{0}' is not supported.</value>
  </data>
  <data name="Amf0Deserializer_ReadPacketHeaders_InvalidFormat" xml:space="preserve">
    <value>AMF header has invalid format.</value>
  </data>
  <data name="Amf0Deserializer_ReadPacketMessages_InvalidFormat" xml:space="preserve">
    <value>AMF message has invalid format.</value>
  </data>
  <data name="AmfPacketReader_DecodingError" xml:space="preserve">
    <value>Error during AMF packet decoding. Check inner exception for details.</value>
  </data>
  <data name="AmfPacketReader_ReadPacketVersion_VersionReadError" xml:space="preserve">
    <value>Unable to read AMF version. Data has unknown format.</value>
  </data>
  <data name="AmfPacketReader_Read_StreamClosed" xml:space="preserve">
    <value>Unable to read from the stream.</value>
  </data>
  <data name="AmfPacketWriter_Write_StreamNotWriteable" xml:space="preserve">
    <value>Unable to write to the stream.</value>
  </data>
  <data name="AmfPacketWriter_Write_PacketEmpty" xml:space="preserve">
    <value>Packet contains no messages.</value>
  </data>
  <data name="AmfPacketEncoder_EncodingError" xml:space="preserve">
    <value>Error during serialization. Check inner exception for details.</value>
  </data>
  <data name="DataContractAmfSerializer_WriteObject_ErrorWritingAmf" xml:space="preserve">
    <value>Error writing AMF data.</value>
  </data>
  <data name="DataContractAmfSerializer_WriteObject_ContractsError" xml:space="preserve">
    <value>Unable to serialize data contracts.</value>
  </data>
  <data name="Amf3Decoder_ReadValue_TypeMarkerNotFound" xml:space="preserve">
    <value>Value type marker not found at position {0}.</value>
  </data>
  <data name="Amf3Decoder_ReadValue_Debug" xml:space="preserve">
    <value>Reading value of type {0} from position {1}.</value>
  </data>
  <data name="Amf0Decoder_ReadPacketHeaders_Debug" xml:space="preserve">
    <value>Found {0} message headers.</value>
  </data>
  <data name="Amf0Decoder_ReadPacketMessages_Debug" xml:space="preserve">
    <value>Found {0} message bodies.</value>
  </data>
  <data name="AbstractAmfDecoder_CurrentAmfVersion_Debug" xml:space="preserve">
    <value>Switching current AMF context to {0}.</value>
  </data>
  <data name="Amf3Decoder_ReadObject_Debug_Name" xml:space="preserve">
    <value>Found type traits for type '{0}'.</value>
  </data>
  <data name="Amf3Decoder_ReadObject_Debug_Members" xml:space="preserve">
    <value>Type contains {0} members.</value>
  </data>
  <data name="Amf3Decoder_ReadObject_Debug_Dynamic" xml:space="preserve">
    <value>Type is dynamic.</value>
  </data>
  <data name="Amf3Decoder_ReadObject_Debug_Externizable" xml:space="preserve">
    <value>Type is externizable.</value>
  </data>
  <data name="Amf3Decoder_ReadObject_Debug_ReadingField" xml:space="preserve">
    <value>Trying to read a value for a member #{0} '{1}'.</value>
  </data>
  <data name="Amf3Decoder_ReadObject_Debug_ReadingDynamic" xml:space="preserve">
    <value>Reading dynamic type members.</value>
  </data>
  <data name="Amf3Decoder_ReadObject_Debug_DynamicEnd" xml:space="preserve">
    <value>Dynamic portion of the type has ended.</value>
  </data>
  <data name="Amf3Decoder_ReadObject_Debug_End" xml:space="preserve">
    <value>Type has been read successfully.</value>
  </data>
	<data name="Amf3Decoder_ReadObject_Debug_ReadingDynamicField">
		<value><![CDATA[Trying to read a value for a dynamic member '{0}'.]]></value>
	</data>
	<data name="Amf3Decoder_ReadValue_End">
		<value xml:space="preserve">Finished reading value of type {0} on position {1}.</value>
	</data>
	<data name="Amf3Decoder_ReadValue_InvalidMarker.">
		<value xml:space="preserve">Type marker not found at position {0}.</value>
	</data>
</root>